/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Crowdfunding {
  export type ProjectStruct = {
    projectID: BigNumberish;
    projectGoal: BigNumberish;
    balance: BigNumberish;
    funders: BigNumberish;
    title: string;
    description: string;
    owner: string;
    isComplete: boolean;
    isClosed: boolean;
  };

  export type ProjectStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    boolean,
    boolean
  ] & {
    projectID: BigNumber;
    projectGoal: BigNumber;
    balance: BigNumber;
    funders: BigNumber;
    title: string;
    description: string;
    owner: string;
    isComplete: boolean;
    isClosed: boolean;
  };
}

export interface CrowdfundingInterface extends utils.Interface {
  contractName: "Crowdfunding";
  functions: {
    "closeProjectAndTransferBalance(uint256)": FunctionFragment;
    "createProject(string,string,uint256)": FunctionFragment;
    "fetchAllProjects()": FunctionFragment;
    "fetchProjectByID(uint256)": FunctionFragment;
    "fundProject(uint256)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getContractCrowdTokenBalance()": FunctionFragment;
    "getListingFee()": FunctionFragment;
    "getTokenContractAddress()": FunctionFragment;
    "getUserCrowdTokenBalance()": FunctionFragment;
    "markProjectComplete(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "closeProjectAndTransferBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchAllProjects",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchProjectByID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundProject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractCrowdTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCrowdTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markProjectComplete",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "closeProjectAndTransferBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchAllProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchProjectByID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractCrowdTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCrowdTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markProjectComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ProjectCreated(uint256,uint256,uint256,string,string,address,bool,bool)": EventFragment;
    "ProjectFunded(uint256,uint256,address)": EventFragment;
    "TokenTransferred(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ProjectCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string, string, boolean, boolean],
  {
    projectID: BigNumber;
    projectGoal: BigNumber;
    balance: BigNumber;
    title: string;
    description: string;
    owner: string;
    isComplete: boolean;
    isClosed: boolean;
  }
>;

export type ProjectCreatedEventFilter = TypedEventFilter<ProjectCreatedEvent>;

export type ProjectFundedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { projectID: BigNumber; amount: BigNumber; paidBy: string }
>;

export type ProjectFundedEventFilter = TypedEventFilter<ProjectFundedEvent>;

export type TokenTransferredEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  {
    receiver: string;
    amountTransferred: BigNumber;
    userTokenBalance: BigNumber;
  }
>;

export type TokenTransferredEventFilter =
  TypedEventFilter<TokenTransferredEvent>;

export interface Crowdfunding extends BaseContract {
  contractName: "Crowdfunding";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrowdfundingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    closeProjectAndTransferBalance(
      projectID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createProject(
      title: string,
      description: string,
      projectGoal: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchAllProjects(
      overrides?: CallOverrides
    ): Promise<[Crowdfunding.ProjectStructOutput[]]>;

    fetchProjectByID(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Crowdfunding.ProjectStructOutput]>;

    fundProject(
      projectID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getContractCrowdTokenBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getListingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenContractAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { tokenContract: string }>;

    getUserCrowdTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    markProjectComplete(
      projectID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  closeProjectAndTransferBalance(
    projectID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createProject(
    title: string,
    description: string,
    projectGoal: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchAllProjects(
    overrides?: CallOverrides
  ): Promise<Crowdfunding.ProjectStructOutput[]>;

  fetchProjectByID(
    projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Crowdfunding.ProjectStructOutput>;

  fundProject(
    projectID: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getContractCrowdTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getListingFee(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenContractAddress(overrides?: CallOverrides): Promise<string>;

  getUserCrowdTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  markProjectComplete(
    projectID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    closeProjectAndTransferBalance(
      projectID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createProject(
      title: string,
      description: string,
      projectGoal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchAllProjects(
      overrides?: CallOverrides
    ): Promise<Crowdfunding.ProjectStructOutput[]>;

    fetchProjectByID(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Crowdfunding.ProjectStructOutput>;

    fundProject(
      projectID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getContractCrowdTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getListingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenContractAddress(overrides?: CallOverrides): Promise<string>;

    getUserCrowdTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    markProjectComplete(
      projectID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProjectCreated(uint256,uint256,uint256,string,string,address,bool,bool)"(
      projectID?: null,
      projectGoal?: null,
      balance?: null,
      title?: null,
      description?: null,
      owner?: null,
      isComplete?: null,
      isClosed?: null
    ): ProjectCreatedEventFilter;
    ProjectCreated(
      projectID?: null,
      projectGoal?: null,
      balance?: null,
      title?: null,
      description?: null,
      owner?: null,
      isComplete?: null,
      isClosed?: null
    ): ProjectCreatedEventFilter;

    "ProjectFunded(uint256,uint256,address)"(
      projectID?: null,
      amount?: null,
      paidBy?: null
    ): ProjectFundedEventFilter;
    ProjectFunded(
      projectID?: null,
      amount?: null,
      paidBy?: null
    ): ProjectFundedEventFilter;

    "TokenTransferred(address,uint256,uint256)"(
      receiver?: null,
      amountTransferred?: null,
      userTokenBalance?: null
    ): TokenTransferredEventFilter;
    TokenTransferred(
      receiver?: null,
      amountTransferred?: null,
      userTokenBalance?: null
    ): TokenTransferredEventFilter;
  };

  estimateGas: {
    closeProjectAndTransferBalance(
      projectID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createProject(
      title: string,
      description: string,
      projectGoal: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchAllProjects(overrides?: CallOverrides): Promise<BigNumber>;

    fetchProjectByID(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundProject(
      projectID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getContractCrowdTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getListingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getUserCrowdTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    markProjectComplete(
      projectID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    closeProjectAndTransferBalance(
      projectID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createProject(
      title: string,
      description: string,
      projectGoal: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchAllProjects(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchProjectByID(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundProject(
      projectID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractCrowdTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserCrowdTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markProjectComplete(
      projectID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
